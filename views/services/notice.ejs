<style>
  /* 셀 내용에서 줄바꿈을 허용하는 스타일 */
  .tui-grid-cell-content {
    white-space: pre-wrap; /* 줄바꿈 허용 */
  }
</style>

<script>
  $(document).ready(async function () {

    let notice_data = await commonCall('post', 'notice', {})

    console.log(notice_data)

    window.grid = new tui.Grid({
      el: document.getElementById("grid"),
      columns: [
        { header: 'Date', name: 'updatedAt', width: 130, align: 'center', formatter: function({value}){return formatDate(value);}},
        { header: 'User', name: 'user_name', width: 100, align: 'center' },
        { header: 'Title', name: 'title', width: 150, align: 'left' },
        { header: 'Content', name: 'content', align: 'left' },
      ],
      rowHeight: 'auto', // 행 높이를 자동으로 설정
      bodyHeight: 'fitToParent' // 그리드 높이를 컨테이너에 맞게 설정
    });

    grid.resetData(notice_data);

    /**
    // Title 열을 클릭했을 때 팝업을 띄우는 이벤트 핸들러
    $('#targetTable tbody').on('click', 'td:first-child', function () {
      let data = targetTable.row(this).data();  // 클릭한 행의 데이터 가져오기
      //alert(`Title:${data.title}, ID: ${data.id}`);      // 팝업에 타이틀 표시

      const url = `/popup/notice/${data.id}`; // 팝업으로 열릴 주소
      const popupWidth = 1000;
      const popupHeight = 800;

      // 화면 가운데에 팝업을 열도록 위치 계산
      const left = (screen.width - popupWidth) / 2;
      const top = (screen.height - popupHeight) / 2;

      // 팝업 창 열기
      window.open(
        url,
        'popupWindow',
        `width=${popupWidth},height=${popupHeight},top=${top},left=${left},scrollbars=yes,resizable=yes`
      );

    });
    */


  })


</script>
<h1>Notice</h1>

<body>
  <div id="grid"></div>
</body>